{"name":"Ember Vocabulary","tagline":"A simple glossary for Ember terms and concepts","body":"# Ember Vocab\r\n\r\n## General Concepts\r\n\r\n### ember.js\r\n\r\nThe JavaScript application framework.\r\n\r\n```js\r\nexport default Ember.Component.extend({\r\n  classNameBindings: ['isUrgent'],\r\n  isUrgent: true\r\n});\r\n```\r\n\r\n### Ember Data\r\n\r\nEmber's official data modeling solution\r\n\r\n```js\r\nexport default DS.Model.extend({\r\n  firstName: DS.attr(),\r\n  lastName: DS.attr(),\r\n  birthday: DS.attr()\r\n});\r\n```\r\n\r\n### Ember CLI\r\n\r\nEmber's official scaffolding and build tool\r\n\r\n```\r\nember g http-mock posts\r\n```\r\n\r\n### Ember\r\n\r\nA combination of technologies, philosophies, and people\r\n\r\n### Router\r\n\r\nMaps URLs to routes\r\n\r\n```js\r\nRouter.map(function() {\r\n  this.route('about', { path: '/about' });\r\n  this.route('favorites', { path: '/favs' });\r\n});\r\n```\r\n\r\n### Route\r\n\r\nSets data on a controller, renders templates, redirects requests, handles/bubbles actions\r\n\r\n```js\r\nexport default Ember.Route.extend({\r\n  model: function(){\r\n    return this.store.findRecord(\"author\", 1);\r\n  },\r\n  actions: {\r\n    invalidateModel: function(){\r\n      this.refresh();\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Controllers\r\n\r\nBinds data to templates, holds temporary data, receives/bubbles actions\r\n\r\n```js\r\nexport default Ember.Controller.extend({\r\n  sortedData: [1,2,3],\r\n  actions: {\r\n    upvote: function(){\r\n      return true;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Services\r\n\r\nA \"routeless controller\". A singleton that represents application-wide state. Can be injected into other Ember objects.\r\n\r\n```js\r\nexport default Ember.Service.extend({\r\n  currentSong: Ember.computed(function(){\r\n    return {\r\n      title: \"It's My Job To Keep Punk Rock Elite\",\r\n      artist: \"NOFX\"\r\n    })\r\n  })\r\n});\r\n```\r\n\r\n### Templates\r\n\r\nHTML that can use bound variables, apply simple logic, and send actions\r\n\r\n```js\r\n<p>Currently listening to {{currentSong.artist}}: \"{{currentSong.title}}\"</p>\r\n```\r\n\r\n### Actions\r\n\r\nA response to a user interaction. Looks to controller for handler. Will bubble through the route hierarchy until it finds a handler.\r\n\r\n```js\r\nexport default Ember.Controller.extend({\r\n  setCityDropdown: function(state){\r\n    // Set a list of cities\r\n  },\r\n  actions: {\r\n    stateDropdownChanged(state) {\r\n      this.setCityDropdown(state);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### View\r\n\r\nThe object that backs a template, determines its parent tag, and responds to DOM events. Removed in 2.0.\r\n\r\n```js\r\nexport default Ember.View.extend({\r\n  click: function(event){\r\n    // Handle clicks\r\n  },\r\n  didInsertElement: function(){\r\n    // Load jQuery plugin\r\n  }\r\n});\r\n```\r\n\r\n### Component\r\n\r\nA view combined with a controller. Renders templates directly. Instantiated in a template, and can send actions out.\r\n\r\n```js\r\nexport default Ember.Component.extend({\r\n  tagName: \"nav\",\r\n  click: function(event){\r\n    // Handle click event\r\n  },\r\n  actions: {\r\n    upvote: function(){\r\n      this.sendAction(\"upvoteArtist\");\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Mixin\r\n\r\nA collection of properties and methods that you can add to an Ember object.\r\n\r\n```js\r\nexport default Ember.Mixin.create({\r\n  edit: function() {\r\n    console.log('starting to edit');\r\n    this.set('isEditing', true);\r\n  },\r\n  isEditing: false\r\n});\r\n```\r\n\r\n### Observer\r\n\r\nTriggers a function when a primitive property changes.\r\n\r\n```js\r\nEmber.Object.extend({\r\n  valueObserver: Ember.observer('value', function() {\r\n    // Executes whenever the \"value\" property changes\r\n  })\r\n});\r\n```\r\n\r\n### Computed Property\r\n\r\nProperty that recalculates whenever other properties change.\r\n\r\n```js\r\nEmber.Component.extend({\r\n  firstName: \"Kyle\",\r\n  lastName: \"Coberly\",\r\n  fullName: Ember.computed(\"firstName\", \"lastName\", function(){\r\n    return this.get(\"firstName\") + \" \" + this.get(\"lastName\");\r\n  })\r\n});\r\n```\r\n\r\n### Model\r\n\r\nDefines properties and relationships for a type of data\r\n\r\n```js\r\nexport default DS.Model.extend({\r\n  firstName: DS.attr(),\r\n  lastName: DS.attr(),\r\n  fullName: Ember.computed('firstName', 'lastName', function() {\r\n    return this.get('firstName') + ' ' + this.get('lastName');\r\n  })\r\n});\r\n```\r\n\r\n### Adapter\r\n\r\nTranslates your application's data request into a server request\r\n\r\n```js\r\nexport default DS.RESTAdapter.extend({\r\n  host: \"www.kylecoberly.com\",\r\n  namespace: \"api\",\r\n  headers: {\r\n    \"API_KEY\": \"secret key\",\r\n    \"ANOTHER_HEADER\": \"Some header value\"\r\n  }\r\n});\r\n```\r\n\r\n### Serializer\r\n\r\nFormats your data payload to and from the server\r\n\r\n```js\r\nexport default DS.JSONSerializer.extend({\r\n  primaryKey: '_id'\r\n});\r\n```\r\n\r\n### HTTP Mock\r\n\r\nFake server endpoint that can return mock data\r\n\r\n```js\r\nvar data = {\r\n  author: {\r\n    firstName: \"Kyle\",\r\n    lastName: \"Coberly\"\r\n  }\r\n};\r\n\r\nmodule.exports = function(app) {\r\n  var express = require('express');\r\n  var projectRouter = express.Router();\r\n  projectRouter.get('/', function(req, res) {\r\n    res.send(data);\r\n  });\r\n  app.use('/api/project', projectRouter);\r\n};\r\n```\r\n\r\n### Fixtures\r\n\r\nMock data that's attached to a model. Deprecated.\r\n\r\n```js\r\nvar Author = DS.Model.extend({\r\n  firstName: DS.attr('string'),\r\n  lastName: DS.attr('string')\r\n});\r\n\r\nAuthor.reopenClass({\r\n  FIXTURES: [\r\n    {id: 1, firstName: 'Bugs', lastName: 'Bunny'},\r\n    {id: 2, firstName: 'Wile E.', lastName: 'Coyote'}\r\n  ]\r\n});\r\n\r\nexport default Author;\r\n```\r\n\r\n### Transform\r\n\r\nA data type on a model that you can coerce to or from\r\n\r\n```js\r\n// Transport in C, app uses F\r\nexport default DS.Transform.extend({\r\n  deserialize: function(serialized) {\r\n    return (serialized *  1.8) + 32;\r\n  },\r\n  serialize: function(deserialized) {\r\n    return (deserialized - 32) / 1.8;\r\n  }\r\n});\r\n```\r\n\r\n### Record\r\n\r\nA specific instance of a model\r\n\r\n```js\r\nvar tyrion = this.store.findRecord('person', 1);\r\n// ...after the record has loaded\r\ntyrion.set('firstName', \"Yollo\");\r\n```\r\n\r\n### Store\r\n\r\nCollection of all the records in the application\r\n\r\n```js\r\nvar post = this.store.findRecord('post', 1);\r\n```\r\n\r\n### Snapshot\r\n\r\nThe state of a record at a particular point in time. Used internally in Ember Data.\r\n\r\n```js\r\n// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\r\npostSnapshot.attr('author'); // => 'Tomster'\r\npostSnapshot.attr('title'); // => 'Ember.js rocks'\r\n```\r\n\r\n### Resolver\r\n\r\nThe tool that Ember uses to look up modules, files, and objects based on naming conventions\r\n\r\n### Module\r\n\r\nAn encapsulated Ember object\r\n\r\n```js\r\n// app/routes/index.js\r\nimport Ember from \"ember\";\r\n\r\nexport default Ember.Route.extend({\r\n  model: function() {\r\n    return ['red', 'yellow', 'blue'];\r\n  }\r\n});\r\n```\r\n\r\n### Pod\r\n\r\nFile organization style where files are organized by feature rather than object type.\r\n\r\n### Helper\r\n\r\nCustom HTMLBars function\r\n\r\n```js\r\nexport default Ember.Helper.join(function(params, hash) {\r\n  return params.join(' ');\r\n});\r\n```\r\n\r\n```handlebars\r\n{{join firstName lastName}}\r\n```\r\n\r\n### Initializer\r\n\r\nFunction that runs when the application starts\r\n\r\n```js\r\n// app/initializers/observation.js\r\nexport default {\r\n  name: 'observation',\r\n  initialize: function() {\r\n    // code\r\n  }\r\n};\r\n```\r\n\r\n### Util\r\n\r\nContainer for generic functions and values that can be imported into other objects\r\n\r\n```js\r\nexport default Ember.Object.extend({\r\n  getRandomNumber: function(min, max){\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n});\r\n```\r\n\r\n### CSP\r\n\r\nContent Security Policy. A white-listing security tool installed by default in Ember CLI.\r\n\r\n### JSON-API\r\n\r\nThe recommended data format for data APIs. Also used internally in Ember Data.\r\n\r\n### HTMLBars\r\n\r\nA version of Handlebars that uses DOM elements internally instead of HTML strings. Same syntax as Handlebars.\r\n\r\n### Promise\r\n\r\nAn eventual value, such as one that will come back from a server request. Ember's implementation matches the ES2015 spec, but adds the .hash() and .all() methods.\r\n\r\n### Unit Test\r\n\r\nTests code logic. Doesn't need the application to be running.\r\n\r\n### Integration Test\r\n\r\nTests application logic. Requires the application to be running.\r\n\r\n### Acceptance Test\r\n\r\nTests user actions. Requires the application to be running.","google":"UA-67207004-1","note":"Don't delete this file! It's used internally to help with page regeneration."}